%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 24.2.0
%%For: (Phabbius) ()
%%Title: (Uerj_CMYK_PB_v8.ai)
%%CreationDate: 5/19/2021 12:17 PM
%%Canvassize: 16383
%%BoundingBox: 101 240 494 666
%%HiResBoundingBox: 101.4318 240.1401 493.5592 665.0235
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKCustomColor: 0.336431 0.435798 1 0.093904 (PANTONE 1255 C)
%%+ 0.817655 0.522576 0 0 (PANTONE 285 C)
%%+ 0 0.894499 0.94403 0 (PANTONE Warm Red C)
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 297.9318 452.5235 297.9318 452.5235
%AI3_TileBox: 3.49549 68.6369 591.4955 836.6369
%AI3_DocumentPreview: None
%AI5_ArtSize: 392.1274 424.7732
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -249.5682 711.0235 1.6875 1587 886 26 0 0 2642 145 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 120 128 8
%%BeginData: 9195 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD50FF
%A8FD77FF52A8FD6DFFA82752A8FD04FF7DF8A8FD6EFFA82727A8FFFFFF52
%2752FD05FFA8A8FD68FF7DF827A8FFA82720277DFD04FF5252FD68FFA827
%207DFFFF27272752FFFFFFA8207DFD68FFA8F82727FFFF52F827F87DFFFF
%7D2727FFFFFFA8FD64FF52272752FFFF7DFD0427FFFF7D27277DFFFF7D84
%FD54FFA87DA8FD0AFFA8272720277DFFFF7DF8272027A8FF7D27F8277DFF
%7D277DFD0CFF7D52A8FD43FFA8272727A8FD08FF7D272720277DFFFFFF27
%27202727A8FFA827272027A8FF52277DFD0AFF52272727A8FD42FF2727FF
%2727A8FD06FF7DF827F87DA8FFFFFF2727F827F827A8FF7D27F827F827A8
%A8F82727FD08FF7DF87DFF2752FD42FF2752FFFF2752FD05FFA8272752AF
%FFFFFF7EFD062752FFFFA8FD06275952272727FD06FFA8277DFF8427A8FF
%7EFD3DFF5252FFA8F853FF84F87DFD04FF522727FFFFFF52272027F82720
%27F8A9FFFF52272027F8272027F827202727FD05FF2727FFA82052FF5220
%A8FD3CFFA82052FF7D207DFF7D20A8FFFFA82727FFFFA827272027272720
%2727A8FFFFFF2820272727202727272027272752FD04FF277DFF2727FFA8
%2084FF7DFD39FF7D7DA8A8F852FF52F8A8FF7DA8FFFFA8F87DFF7EF827F8
%27F82727537DFD04FF52F827F827F827F827F827F827F852FD04FF5927F8
%27A8A82752FF52F8A8FD37FFA8272727527D2752A85227FD05FFA852A8FF
%2727277D7DA8FD06FFA852FD0E2752FD05FFA87DA87D2727275227A8FFA9
%FD37FF7D272752272720527DA8FD06FF7DFF52277DFD06FFAF7E7D5227F8
%272027F8272027F8272027F827207EFD08FFF852A827F8A8FF52F8FD35FF
%5252FF7D2752A8522727FD0AFF7DA8FFFFFF7D7D52522727202727272027
%27272027272720272727207DFFFFA8A8FD05FF52275227A8A82727A8A8FD
%34FF522727FF7D2752FFA8FD0DFF7D52F827F827F827F827F827F827F827
%F827F827F827F827F852FFFFFF5953FD06FF52F8A87D27F8A9FF5252FD34
%FFA82727A8A82752FD0BFFA87DFD19277DFFFFFFA827A8FD06FFA8A87D27
%52FFA9FFA8277DFD30FF527DA8FFFF52F87D7DA8FD0AFF5227F8272027F8
%272027F8272727F8272027F8272027F8272027F87DFFFF7D7D20277DFD07
%FFA82752FF8427A8A8F827FD2FFF7D27272728A8A87D20A8FD0AFFFD0427
%20FD0627527DA82727202727272027272720FD04274C2727202727FD09FF
%A87D7EFF52272752A8FD30FF52275252F827287DFD0AFF2727F827F827F8
%27F82727A8FFA8F827F827F827F8277D52F827F827F827F827F827F87DFD
%0AFF52277D27F87DFFFF52A8FD2FFF52277DFF7D52A9FD09FF7DFD0A27FF
%FFFF52FD0727A8FFFD0B27A8FD0CFF272727FFFF7D272752FD2CFF52A8FF
%FF52277DFD0CFF522027F8272027F827207DFFFFFF7EF8272027F8277DFF
%52272027F8272027F85252A8FD0DFFA852A852272027F87DFD2BFF7D2727
%527DFF7D277DFD0BFF5227272720272727202752FD04FFA8FD0527FFFF7D
%2027272720527DA8FD11FFA827277D5227A8FFA8FD29FFA827527E272727
%7D52A8FD0BFF7DF827F827F827F827F82752FD05FF5227F852FFFF5327F8
%2727A8FD14FFA87DA87DF87E7D27F8FD29FFA827FFFF52527D277DFD0CFF
%A852FD0B27A8FD04FF522727FFFFA8272727A8FD17FF7D2752272752FD2D
%FFA827FFA8277DFD0DFFA8522027F8272027F8272027F8FD04FF7D202752
%FFFF7DF827A8FD16FFAF2027207DA8FF7D52A8FD26FFA85252A8A8FFFF7D
%27FD10FFA8522720272727202727277DFFFFFF2827272752FFFF7E27A8FD
%17FF7D53FFFFFF522727FD28FF5227F827277D53A8FD12FFA8A87D7D527D
%527D7DFD04FF7D527D527DA8FFFFFFA8FD19FFA852F82727FD28FFA8FFFF
%7D27522727FD20FF7DA87DA87DA87DA87DA87DFD17FF7D27277D7D27A8FD
%27FF52F8272052FF5227FD16FFA87DFFFFFFFD047D52FD0B27A8FD16FF52
%20272727202727FD26FFA87E527D2727207DFD15FF7D7DFD04FFFD05A852
%52527D5252527D5253527D7EFD15FFA8FD047DA87EA8AFFD25FFA87DFFFF
%A8527DA8FD13FFA87D7DFFFFA8527D527D537D52FD072720272727F827A8
%FD19FFA8A8A8FD25FF7D2752FFA8527DFD14FF52527DFD05FFA8FFA8FFA8
%FF7D7D7DA87D7D59FD077DA8FD14FFA85252FD04277DFD24FF2752FF7DF8
%522052FD12FF527DFD0DFF522027F8272027F8272027F827202727A8FD12
%FF5227527D7DA85227FD24FF52207D2752FF5227FD11FFAFA8FD0EFFA8FD
%0452595252525952525259525252FD17FF7D272EFD24FFA852F87DFF52F8
%7DFD12FF7D52527D527D527D527DFD075253FD0C52277DFD17FF7D52A8FD
%29FF84A8FD14FF52277DFFFFFFA8FFFFFFA8FFA8FFA8FFA8A8FD0C27A8FD
%3EFFFD05275252A8FD14FF5227FD10FF52272027F8272027F852A8FD3FFF
%7D7D7D527D5252A8FD15FF27A8FD10FFFD0427202727277DFD42FFA8A87E
%A87DFD16FF5252FD10FF52F827F827F82727FD40FFA852FD06277EFD15FF
%7D27A8FD0EFFA8FD07277DFD16FF59FFFFA8FFFFA8FD24FFF87D7DA8A8A8
%277DFD16FF2727A8FD0BFFA8A82727F8272027F827A8FD15FF7D27FFA827
%FFA827A8FD23FF2753FFFFFF7D277DFD17FF522752A9FD06FFA8A8535220
%27272720272752A8FD16FFA820A85927A8A827FD24FF5227F827F82727FD
%19FF7D27F852A8A87D522727F827F827F827F827277DA8FD17FF7D27F827
%F827F827A8FD24FFA8A87DA8A8FD1CFF7D27525252275227522852275252
%4C52FD1BFFA8A9A8A87D7D7DFD24FFA8A8A8FFA8FFA8FD1CFF7D5252527D
%5252527DFD045253FD1BFFA852277D7DA8FD26FF7DFD0727FD1BFFFD047D
%537D7D7D527D7D7D52A8FD1BFF52275927272759FD25FFA8A827527D52F8
%27A8FD0FFFA8FFFFFFA8FFFFFFA8FD1BFFA8FD0EFFA8F8A8FFFFA87DF8A8
%FD26FF7D27522752A8FD0CFFA827522752527D2752277DFF7D2752275227
%522752A8FF7D2752522752275252FD06FF53275252277DFD0BFF7E272752
%52A8A82784FD25FF7D202727A8FFFFA8FD0BFFA8522027F87D7D52F82784
%FF7D272027527D5227F8A8FFA8272720275227202752FD05FF7D27F82727
%A8FD0CFF7D7D5227F82720FD26FF5252A8FFFFA85227A8FD0BFFA8272752
%FFFF7D277DFFFFFF522727FFFFA87D277DFFFFA8202752FF84272752FD06
%FF7D2720A8FD11FFA87D7DFD28FFA85227F827F87DFD0BFFA8F82752FFFF
%A8F87DFFFFFF52F8277D5227FF52A8FFFFA827F852A87DF82752FD06FF7D
%F8277DFD3BFF52272752A9FF5252FD0BFFA827277DFFFF7D277DFFFFFF52
%FD042752FD05FFA8FD062752FD07FF592727A8FD3BFF2752FFFFA87D207D
%FD0BFFA8F82752FFFFA8207DFFFFFF52F827595227FF7DA8FFFFA827F852
%7D52F8277DFFFFFF52277D7D20277DFD0BFFA8FD2FFFA8207D5227207DFF
%A9FD0AFFA827207DFFFF7D277DFFFFFF522720FFA87DA8277DFFFFA82727
%52FF8427207DA8FF8427277D7D27277DFD0AFF7D27277DFD2EFF7DF8527D
%FFA852F8A8FD09FFA8F82727FFFF59F87DFFFFFF52F8277DFFFF53F87DFF
%FF7D27F852FFA8F8275252A8A8F852A852F8277DFD09FFA8275252F82759
%FD30FF5227272752FD0AFF7D272727522752FFFFFF52FD08277DFF7DFD04
%27527DFD0427FFFF522752272727FD0AFFA827A8FFFF522752FD2CFFA87D
%2027F8FFA8277EFD0AFF7D5252527DA8FFFFFFFD047D527D7D7D52A8FFA8
%52FD047DFF7D5252A8FFFFA87D525252FD0BFFA852207DA8FF7D27A8FD2B
%FF7D207DA82759FFA8FD3BFF527DA87D2727525227FD2CFFA8277DFF7D84
%FD1BFFA852A852A87D52A87D7DFD18FF7DF852A8FF522727A8FD2DFF5252
%FD1EFF7E277D277D7D27A8277EFD16FFA87DA8A827277DFD32FF7EFD07FF
%7DFD16FFA82784207D7D277D277DFD15FFAF28F8277DFF522727A8FD37FF
%7D2727FD15FFA8527D27527D20A827A8FD15FF5227FF52277DFFA8277DFD
%36FF7D27282827FD15FF277D275352277D52A8FD15FF52275252F82727A8
%A8FD36FF532752FF7D27FD15FF527D4B527D278452FD17FF7D27277DA827
%27FD36FF522752FFA82752FFA8FD13FF527D277D52275252FD18FFA827F8
%A8A8A8FD35FF7D2752FF7D2727FF522727A8FD11FF7D5252527D277D52FD
%11FFA8A9FD07FF5220A8FD37FF52FD0427FF52275253F8FD11FF53522752
%52275259FD10FF7D27F852FD07FF7DA8FD38FF7D527DFF7D2753FF7D27A8
%FD10FFA85252527D277D7DFD0FFFA8277D7D277DFD43FFA82727FFA82752
%FD11FF7E5227525227527DFD10FFF87DFF52F8A8FD42FF7D20FFFF2727FD
%05FFA8A8FD0CFF2752527D27537EFD0BFFA8522052A97D20FFFF5227FD42
%FF7D275227F8A8FD05FF52F8277DFD09FFA87D2752522E52FD0BFF7D2727
%7DF852A82721FFA8277DFD42FF7D2727A8FD05FFA8277E527DA87D7DFD09
%FFA9FD0FFF2752FFA827A8A827527D27AFFD43FFA8FD07FF2727A8FFA852
%202752A87DA8A8FD0CFF7D2752A8FD04FFA8207DFF5227FF7D2727A8FD4B
%FFA82727277DA820A87D275227272752FF527DFFFF5952277DFFA8207D27
%52FD05FF5227FF7D27A8FD4FFF5227FF7DA8A82727FF7DFF7D2752A87D27
%F8A8A8272752F8A85327FF7DF8A8FD04FF7E27527DF8A8FD4EFFA82752FD
%04FF7D2753FFFF7D27FFFF7D272784FF277DFF277DA827FFA8277DFD05FF
%522727A8FD4FFFA87D2727A8A820FF5227A8FF5227FFFFF87D277DFF2852
%FF277DA8277DFF207DFD05FFA852FD54FF7DFF7D27522727FFFF5252FF7D
%277D5252FF2852FF5227FF2752FF5252FD5EFF522727A8FFFFF87DFF53F8
%27F852FF5227FF2752FF7DF852F87DFD63FFA827A8FF277DFF7D27FF5227
%52277DFFFF7D277DFD65FFA8FFA87DA8FF7D52A8A8527D7DFDFCFFFD65FF
%A87D7D7EFD74FF7D27F87DFD74FFA827277DFD74FFA827F8A8FD75FF2727
%A8FD75FF5220FD76FFA8A8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD
%FCFFFDFCFFFD52FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (Flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ Touch Calligraphic Brush/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(Touch Calligraphic Brush)
(1 12 12 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
0.336431 0.435798 1 0.093904 (PANTONE 1255 C) 0 x
(PANTONE 1255 C)
Pc
0.817655 0.522576 0 0 (PANTONE 285 C) 0 x
(PANTONE 285 C)
Pc
0 0.894499 0.94403 0 (PANTONE Warm Red C) 0 x
(PANTONE Warm Red C)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
0 J 0 j 1 w 10 M []0 d0 XR
493.5592 240.1401 m
101.4318 240.1401 L
101.4318 665.0235 L
493.5592 665.0235 L
493.5592 240.1401 L
n
u
*u
0 O
0 0 0 1 k
356.0233 553.3211 m
356.1058 552.274 356.2458 537.2923 334.3246 538.6031 C
333.4671 538.6513 332.4146 538.992 331.6241 538.9016 C
371.9307 565.9659 328.7432 574.7202 324.8589 586.986 C
324.464 581.7081 326.6036 580.0382 328.6046 575.2525 C
330.5299 570.6556 330.1418 568.5432 Y
308.5957 583.4115 312.086 597.361 V
312.2932 598.1845 304.0339 591.5988 305.7846 579.8951 C
307.1843 570.5714 307.8468 555.5577 283.5176 552.3369 C
270.2157 550.5783 234.1457 542.7507 236.3224 523.7889 C
238.4957 504.8348 275.8243 507.1408 Y
286.0883 507.1408 281.6629 515.7558 275.597 518.6781 C
265.0969 523.4712 265.0816 535.1117 291.4492 540.1834 C
278.3259 532.0111 280.2637 527.5417 290.1538 522.3008 C
301.3512 516.4685 291.261 507.2009 296.1232 507.1881 C
299.8993 507.0237 306.5261 507.0013 310.0368 507.0013 C
316.0964 507.0977 287.2715 520.7213 317.1756 538.0569 C
303.0276 517.7781 321.3675 508.5879 324.2154 508.4614 C
327.0614 508.3381 314.6363 520.2374 339.139 525.5745 C
364.4382 531.0901 356.0233 553.3211 Y
356.0233 553.3211 L
f
296.2826 584.8115 m
296.2826 584.8115 L
301.2902 572.4635 293.1381 563.3082 284.8694 560.8772 C
277.4871 558.7024 269.1142 558.1755 263.7028 556.2641 C
258.1444 554.2903 252.2299 548.9019 Y
251.6888 554.6217 258.4349 561.6658 V
266.4689 569.0563 273.4906 568.1265 279.9941 575.1901 C
285.7473 581.4454 280.7478 586.3827 281.255 593.627 C
281.6277 599.0083 283.6077 603.144 287.6743 606.3216 C
285.9919 598.5524 292.176 594.9309 296.2826 584.8115 C
296.2826 584.8115 L
f
256.3557 601.6669 m
256.3557 601.6669 L
268.1501 603.9799 283.4365 582.234 264.9937 574.6371 C
247.7775 567.5511 247.174 552.0044 Y
238.074 567.9763 259.2105 581.1466 V
269.5513 587.5883 262.1747 597.5821 256.3557 601.6669 C
f
*U
*u
349.4526 483.3757 m
349.3624 487.868 341.57 489.5717 339.4723 490.1618 C
295.5231 490.1618 L
293.2373 490.1749 296.6794 483.3896 298.3411 483.3896 C
300.0373 483.3896 349.4526 483.3757 Y
349.4526 483.3757 L
f
1 D
269.6153 492.4196 m
269.6153 492.4196 L
337.8042 492.4117 L
336.7508 496.5894 333.3104 497.1626 Y
295.2326 497.1705 L
293.4057 497.1756 293.5627 495.5431 293.646 494.2964 C
270.7356 494.2964 L
269.4402 494.2964 269.6153 492.4196 Y
269.6153 492.4196 L
f
277.4049 498.9986 m
277.4049 498.9986 L
331.2383 499.0056 L
330.4216 502.9546 328.8764 503.3889 Y
294.7334 503.3889 L
293.7291 503.3889 292.8563 502.8418 293.0919 500.652 C
286.6793 500.652 280.1968 500.652 278.3418 500.6398 C
277.3216 500.6398 277.4049 498.9986 Y
277.4049 498.9986 L
f
267.8757 502.8636 m
267.8757 502.8636 L
266.2294 502.9951 265.127 499.1287 V
263.8312 497.6277 260.862 501.0639 257.1401 493.1391 C
245.8321 491.8164 244.5287 484.5643 246.2329 483.7283 C
246.8696 483.48 246.7956 483.6291 Y
247.3132 488.2218 255.8254 491.1931 258.2507 491.7801 C
261.2837 500.0034 264.5246 496.8451 265.695 498.4574 C
266.4638 502.3987 267.8757 502.8636 Y
267.8757 502.8636 L
f
250.3899 476.7035 m
250.3899 476.7035 L
251.8719 475.3979 251.5184 475.8596 252.9241 474.4267 C
257.7645 468.906 254.4474 457.9849 272.5495 452.3131 C
272.9803 449.2919 274.4895 449.2789 V
275.999 449.2789 318.8211 449.2587 320.6347 449.2789 C
322.4568 449.314 322.8987 452.3131 Y
341.011 457.9849 337.6998 468.906 342.534 474.4267 C
343.9457 475.8596 343.5874 475.3979 345.0685 476.7035 C
347.9494 479.1708 350.1048 481.4776 348.5928 481.4697 C
347.0975 481.4626 247.2934 481.4697 Y
244.7742 481.5386 247.5147 479.1708 250.3899 476.7035 C
250.3899 476.7035 L
f
0 D
256.8917 479.6286 m
256.8917 479.6286 L
301.4867 479.4894 L
311.0987 477.8901 313.9948 470.6929 V
317.1858 461.0106 304.7613 457.9081 293.7362 455.6381 C
287.6272 454.3773 282.3029 452.1197 279.434 452.111 C
277.2595 452.0976 275.7504 455.131 Y
259.8979 460.1395 259.5512 468.1667 257.9026 472.9997 C
256.2554 477.847 252.5573 479.6286 256.8917 479.6286 C
256.8917 479.6286 L
f
1 D
275.2923 446.01 m
275.2923 446.01 L
275.2923 445.2755 275.667 444.687 276.1169 444.687 C
318.9665 444.687 L
319.4223 444.687 319.7832 445.2755 319.7832 446.01 C
319.7832 446.7526 319.4223 447.3476 318.9665 447.3476 C
276.1169 447.3476 L
275.667 447.3476 275.2923 446.7526 275.2923 446.01 C
275.2923 446.01 L
f
287.1502 401.3668 m
287.1502 401.3668 L
285.5228 401.3668 285.0508 401.3617 283.4175 401.3617 C
287.8296 361.2481 L
289.0684 360.8184 288.8529 360.8875 290.268 360.4918 C
287.1502 401.3668 L
287.1502 401.3668 L
f
0 D
290.253 401.3668 m
290.253 401.3668 L
291.7772 401.3668 293.8054 401.3751 295.9319 401.3751 C
296.4572 359.5669 L
294.3394 359.6542 292.5848 359.9467 291.7412 360.0839 C
290.253 401.3668 L
290.253 401.3668 L
f
1 D
297.4632 317.804 m
297.4632 317.804 L
293.7583 317.804 292.6911 318.5512 Y
294.5891 301.5357 L
294.9608 298.842 297.5533 298.842 V
300.1416 298.842 300.5785 301.5425 Y
302.3946 318.5512 L
301.1749 317.804 297.4632 317.804 V
297.4632 317.804 L
f
298.5644 359.5499 m
298.5644 359.5499 L
300.6269 359.6128 302.4485 359.8843 303.2932 360.0147 C
304.7613 401.3617 L
303.2382 401.3668 301.208 401.3668 299.0894 401.3668 C
298.5693 359.7945 L
298.5644 359.5499 L
298.5644 359.5499 L
f
307.9621 401.3348 m
307.9621 401.3348 L
304.977 360.4657 L
306.2166 360.7693 306.1945 360.7693 307.3226 361.1642 C
311.6602 401.2846 L
310.0377 401.3056 309.5816 401.3178 307.9621 401.3348 C
f
*U
u
*u
384.8006 559.2932 m
382.3957 561.0019 380.0557 560.1711 377.9374 558.0326 c
375.0953 555.1713 374.9451 552.2272 377.0847 550.0256 C
382.8878 544.0762 L
399.543 560.8715 L
396.4062 564.0914 L
389.5095 557.1386 L
388.6988 557.9694 L
386.2817 560.4406 388.1288 561.9728 390.119 563.974 c
391.2052 565.0673 392.4179 566.1207 393.014 567.5675 C
389.9375 570.7264 L
389.5367 569.7283 386.4611 566.5014 385.4041 565.4353 c
382.4036 562.4087 384.2515 560.1319 384.8477 559.3331 C
384.8006 559.2932 L
f
0 D
385.5543 555.988 m
386.9453 554.5553 L
382.3055 549.8785 L
380.9154 551.3066 L
379.9176 552.3316 379.9176 553.5499 381.5099 555.1634 c
382.5703 556.2298 384.3065 557.2619 385.5543 555.988 C
f
*U
*u
1 D
213.7708 388.908 m
208.7563 394.5039 L
191.4437 378.409 L
196.3403 372.9583 L
201.486 367.2386 207.2392 373.2712 209.8936 375.7493 c
215.2891 380.7638 217.7181 384.5237 213.7708 388.908 C
f
0 D
206.7562 379.0525 m
202.4141 375.016 200.4058 373.8793 198.5689 375.9146 C
197.1147 377.536 L
209.0971 388.6795 L
210.6553 386.9478 L
212.747 384.622 209.9409 382.0107 206.7562 379.0525 c
f
*U
188.7284 408.4736 m
193.8061 411.2776 L
197.2321 404.8639 L
200.406 406.6166 L
194.8504 417.0197 L
174.2397 405.6256 L
179.9036 395.0161 L
183.0764 396.7688 L
179.5371 403.3891 L
185.5565 406.7209 L
188.7154 400.8064 L
191.8851 402.5591 L
188.7284 408.4736 L
f
*u
1 D
226.0505 377.7097 m
220.3506 382.4246 216.6168 377.7596 212.7044 372.8614 c
208.8334 368.0212 205.0574 363.2973 210.7647 358.5895 c
216.4725 353.8655 220.2395 358.5895 224.1187 363.4226 c
228.0308 368.3256 231.7569 372.9937 226.0505 377.7097 c
f
0 D
220.6071 366.3224 m
216.8124 361.5806 214.9274 359.7437 212.974 361.351 c
211.0292 362.9585 212.4201 365.2223 216.2089 369.966 c
219.998 374.7101 221.8878 376.5461 223.842 374.9406 c
225.7872 373.3322 224.4013 371.0684 220.6071 366.3224 c
f
*U
*u
1 D
365.9834 559.2214 m
371.8409 554.701 375.4134 559.493 379.1611 564.5288 c
382.8742 569.501 386.4827 574.3483 380.6223 578.8627 c
374.7643 583.3862 371.1566 578.537 367.4435 573.5648 c
363.6907 568.5372 360.1233 563.745 365.9834 559.2214 c
f
0 D
371.0441 570.7888 m
374.6738 575.6581 376.5016 577.5622 378.5037 576.0247 c
380.505 574.4795 379.1891 572.1729 375.5616 567.3047 c
371.931 562.4291 370.1032 560.5251 368.1009 562.0686 c
366.1058 563.6137 367.4154 565.9194 371.0441 570.7888 c
f
*U
284.0097 352.0791 m
269.8611 354.7089 L
269.1686 350.8098 L
274.0428 349.9027 L
270.5335 330.3306 L
274.9238 329.514 L
278.4271 349.0931 L
283.3115 348.177 L
284.0097 352.0791 L
f
175.32 522.309 m
181.6072 519.5384 L
178.977 513.3634 L
182.2867 511.9002 L
184.9184 518.0783 L
190.2243 515.7383 L
187.3636 509.0391 L
190.6736 507.579 L
195.3011 518.4317 L
173.7958 527.934 L
169.0648 516.8588 L
172.3689 515.3987 L
175.32 522.309 L
f
263.3031 357.2433 m
258.1305 358.9277 255.7202 356.5939 254.5971 353.0392 c
252.4646 346.2741 260.9342 343.2407 259.6535 339.1469 c
259.1603 337.5958 258.1364 336.7933 256.7024 337.2559 c
254.3615 338.0258 254.8542 339.8757 255.5399 342.0434 C
251.286 343.4261 L
249.8318 339.569 249.7215 335.7879 254.9854 334.0783 c
258.2124 333.0184 262.2841 332.4569 264.1419 338.3444 c
266.3918 345.4843 257.7206 347.8955 259.0784 352.2095 c
259.5691 353.7748 260.6567 354.3559 262.0346 353.9123 c
263.7533 353.353 263.4534 351.5372 262.9233 349.8406 C
267.0562 348.4979 L
268.8367 353.1506 267.438 355.9005 263.3031 357.2433 c
f
197.8968 523.2994 m
185.161 535.4478 L
185.1959 535.4949 L
201.5254 529.4914 L
203.9094 533.5418 L
181.0763 541.1818 L
178.3945 536.6171 L
195.6387 519.4562 L
197.8968 523.2994 L
f
246.702 359.5776 m
253.1996 356.4763 L
254.7351 359.7863 L
244.2016 364.8266 L
234.2237 343.2413 L
244.9633 338.1024 L
246.5005 341.4124 L
239.7906 344.6271 L
242.7055 350.9354 L
248.6894 348.0766 L
250.2255 351.3915 L
244.2438 354.2593 L
246.702 359.5776 L
f
*u
1 D
182.8278 415.1489 m
189.6633 417.7814 193.2849 420.3649 191.2147 425.9245 C
188.583 433.0046 L
166.65 424.5608 L
169.2181 417.649 L
171.9198 410.398 179.4546 413.8481 182.8278 415.1489 c
f
0 D
172.3637 419.5672 m
171.6024 421.6184 L
186.7893 427.4708 L
187.6051 425.2751 L
188.7012 422.3248 185.1477 420.952 181.1032 419.4017 c
175.6049 417.2825 173.325 416.9767 172.3637 419.5672 C
f
*U
295.3545 420.6478 m
290.7431 420.6478 L
290.6609 419.0553 290.4934 417.7324 290.2439 416.6793 c
289.9865 415.6342 289.6407 414.7401 289.2059 414.0145 C
288.811 413.4033 288.2418 412.9676 287.5153 412.719 c
286.7808 412.4614 285.4579 412.338 283.5269 412.338 C
278.5122 412.338 L
278.5122 421.9163 L
279.6469 421.9163 L
280.9562 421.9163 281.8431 421.5898 282.306 420.9463 c
282.7641 420.3079 283.0277 418.9102 283.0827 416.7485 C
286.5852 416.7485 L
286.5852 430.7879 L
283.0827 430.7879 L
283.0827 430.5175 L
283.0827 428.8068 282.8191 427.6225 282.306 426.958 c
281.7862 426.2856 280.8882 425.9529 279.6055 425.9529 C
278.5122 425.9529 L
278.5122 434.4015 L
282.1479 434.4015 L
282.9988 434.4015 L
284.7033 434.4015 285.9358 434.2785 286.7034 434.0288 c
287.4742 433.7853 288.1176 433.3714 288.6497 432.7824 c
289.1146 432.275 289.5094 431.6037 289.8269 430.7661 c
290.1458 429.9282 290.4574 428.7577 290.7431 427.2695 C
295.1955 427.2695 L
295.1955 438.7246 L
265.6383 438.7246 L
265.6383 434.4015 L
267.008 434.4015 L
268.0132 434.4015 268.6425 434.2643 268.9121 433.9797 C
269.1896 433.7033 269.3279 432.9626 269.3279 431.7571 C
269.3279 414.9689 L
269.3279 414.7472 L
269.3279 413.6179 269.1757 412.9274 268.884 412.691 c
268.5946 412.4554 267.9851 412.338 267.0491 412.338 C
265.6383 412.338 L
265.6383 407.967 L
295.3545 407.967 L
295.3545 420.6478 L
f
*u
1 D
170.3971 497.4052 m
174.4546 496.2206 175.5068 498.9764 175.9005 499.8906 C
175.9646 499.8691 L
175.6599 496.891 177.5231 495.2217 180.3969 494.3837 c
184.2321 493.2632 186.8306 494.5652 187.6691 497.5424 C
189.9471 505.5973 L
167.4108 512.1842 L
166.1769 507.8293 L
175.5147 505.0981 L
175.1953 503.97 L
174.246 500.618 172.0375 501.5188 169.3426 502.3086 c
167.8816 502.7304 166.3863 503.2987 164.8483 503.1184 C
163.6379 498.8452 L
164.6898 498.9764 168.9608 497.8278 170.3971 497.4052 c
f
0 D
178.4299 502.149 m
178.977 504.0802 L
185.2512 502.2454 L
184.7041 500.3133 L
184.318 498.9283 183.263 498.3262 181.1083 498.9574 c
179.6754 499.3792 177.9369 500.4164 178.4299 502.149 C
f
*U
167.0709 479.5637 m
174.378 478.4995 175.2712 487.5914 179.6754 486.9391 c
181.29 486.7047 182.0293 485.7154 181.8249 484.2604 c
181.5676 482.4386 179.7585 482.4306 178.022 482.6962 C
177.4057 478.3238 L
182.2099 477.3129 184.6409 479.1708 185.2651 483.539 c
186.0398 489.0115 183.3752 491.0389 179.7446 491.5729 c
172.832 492.5928 171.2886 483.588 167.114 484.2062 c
165.5337 484.4339 164.5778 485.3407 164.7989 486.8569 c
165.147 489.329 167.0238 489.1348 169.2405 488.8108 C
169.8849 493.3046 L
165.8954 494.1292 162.2157 493.6173 161.4209 488.0546 c
160.935 484.6331 161.06 480.4515 167.0709 479.5637 c
f
207.5374 538.1002 m
188.7208 552.352 L
186.063 548.7083 L
204.8717 534.4707 L
207.5374 538.1002 L
f
183.9643 474.6059 m
160.528 475.6249 L
160.3395 471.0946 L
183.7698 470.0684 L
183.9643 474.6059 L
f
221.9213 554.0488 m
225.4408 556.8406 L
215.4064 569.9151 L
213.8111 572.0085 213.6328 573.7031 215.1692 574.9226 c
216.4507 575.9348 218.0361 575.7265 219.8169 573.4145 C
229.839 560.323 L
233.3574 563.1137 L
223.1269 576.4612 L
220.4113 580.0005 216.8306 580.7682 212.9675 577.7005 c
208.6804 574.2984 209.5404 570.2077 211.6939 567.3889 C
221.9213 554.0488 L
f
*u
1 D
185.7016 445.608 m
161.5317 446.468 L
162.4516 442.0845 L
167.7906 441.9992 L
169.0724 435.9475 L
164.2453 433.6537 L
165.2292 428.9941 L
186.9341 439.7627 L
185.7016 445.608 L
f
0 D
172.3966 437.6571 m
171.5037 441.8904 L
181.8434 442.0276 L
181.8513 441.9723 L
172.3966 437.6571 L
f
*U
211.9844 543.6541 m
200.1393 554.9638 L
200.1895 555.0049 L
215.9104 547.8999 L
220.0255 552.3664 L
202.9402 568.6968 L
200.0792 565.6093 L
212.5865 553.6681 L
212.5446 553.6259 L
196.0639 561.2511 L
192.0385 556.8959 L
209.1373 540.5664 L
211.9844 543.6541 L
f
*u
1 D
172.8814 451.5987 m
180.1749 452.0758 184.3866 453.4549 184.019 459.3912 C
183.5399 466.9441 L
160.1337 465.429 L
160.5954 458.0603 L
161.0816 450.3249 169.287 451.3632 172.8814 451.5987 c
f
0 D
180.229 462.1878 m
180.3694 459.8461 L
180.5695 456.7037 176.7745 456.4539 172.4655 456.1775 c
166.5933 455.8017 164.3284 456.1906 164.1549 458.9521 C
164.0177 461.1359 L
180.229 462.1878 L
f
*U
243.4946 407.0392 m
247.6786 407.0392 250.8644 407.8919 253.04 409.6018 c
255.2074 411.313 256.2948 413.8055 256.2948 417.0943 C
256.2948 431.9164 L
256.2948 433.023 256.432 433.7116 256.7095 433.9871 c
256.9941 434.2646 257.6237 434.4018 258.6076 434.4018 C
259.8945 434.4018 L
259.8945 438.7249 L
246.835 438.7249 L
246.835 434.4018 L
248.2679 434.4018 L
249.2569 434.4018 249.8893 434.2646 250.158 434.001 c
250.4356 433.7314 250.5668 432.9969 250.5668 431.7846 C
250.5668 417.856 L
250.5668 415.7164 250.158 414.1732 249.3269 413.2324 c
248.4952 412.2884 247.1244 411.8253 245.2215 411.8253 c
243.612 411.8253 242.4705 412.2964 241.7981 413.2502 c
241.1277 414.2064 240.787 415.8697 240.787 418.2369 C
240.787 431.7846 L
240.787 432.9476 240.9273 433.6756 241.2099 433.9599 C
241.4866 434.2567 242.1388 434.4018 243.1488 434.4018 C
244.7084 434.4018 L
244.7084 438.7249 L
227.7266 438.7249 L
227.7266 434.4018 L
229.1598 434.4018 L
230.1568 434.4018 230.794 434.2567 231.0857 433.9599 c
231.3683 433.6756 231.5134 432.9476 231.5134 431.7846 C
231.5134 416.7136 L
231.5134 413.6391 232.5529 411.2561 234.6452 409.5675 c
236.7366 407.878 239.6798 407.0392 243.4946 407.0392 c
f
391.6488 402.1296 m
411.2821 389.0733 L
413.7214 392.8762 L
394.086 405.9235 L
391.6488 402.1296 L
f
*u
1 D
287.7097 351.8983 m
280.4071 328.4399 L
284.7937 328.1712 L
286.3176 333.379 L
292.3894 333.0045 L
293.2554 327.6592 L
297.9374 327.3676 L
293.5749 351.5374 L
287.7097 351.8983 L
f
0 D
287.418 336.9798 m
290.0628 347.1483 L
290.1189 347.1403 L
291.6641 336.7242 L
287.418 336.9798 L
f
*U
*u
1 D
397.1628 389.1506 m
397.1129 389.1926 L
398.5268 391.803 397.4513 394.088 395.1255 395.9921 c
392.017 398.5486 389.1268 398.382 387.216 395.9728 C
382.0363 389.4554 L
400.2704 374.4598 L
403.0753 377.9813 L
395.5275 384.1971 L
396.248 385.1062 L
398.4004 387.815 400.098 386.1102 402.2717 384.3224 c
403.4563 383.3535 404.6204 382.2389 406.1015 381.7882 C
408.8534 385.2516 L
407.8344 385.543 404.3429 388.3056 403.1796 389.2547 c
399.8957 391.9555 397.8743 389.8301 397.1628 389.1506 C
f
0 D
393.963 388.0636 m
392.7214 386.498 L
387.6378 390.6737 L
388.8842 392.2393 L
389.7794 393.3624 390.9708 393.4998 392.7146 392.0666 c
393.88 391.1108 395.0773 389.4681 393.963 388.0636 C
f
*U
*u
1 D
365.3804 374.8139 m
359.4929 370.3334 363.0322 365.5202 366.7501 360.4657 c
370.4349 355.458 374.0165 350.5878 379.8961 355.0765 c
385.7831 359.5578 382.2089 364.4189 378.5321 369.4275 c
374.8062 374.4822 371.2657 379.296 365.3804 374.8139 c
f
0 D
377.7976 357.9304 m
375.7881 356.4 373.9666 358.3253 370.366 363.2125 c
366.7723 368.1176 365.4714 370.4247 367.4786 371.9537 c
369.4929 373.485 371.3159 371.5671 374.9094 366.6759 c
378.51 361.7793 379.8057 359.4594 377.7976 357.9304 c
f
*U
*u
1 D
421.6649 447.6022 m
414.51 449.1686 410.0916 448.9948 408.867 443.1696 C
407.2995 435.774 L
430.232 430.7658 L
431.7602 437.991 L
433.3606 445.5658 425.1813 446.8354 421.6649 447.6022 c
f
0 D
428.0975 438.1143 m
427.6414 435.9688 L
411.7598 439.4367 L
412.2451 441.7308 L
412.8965 444.8183 416.6144 444.0084 420.8403 443.0874 c
426.5884 441.8269 428.6667 440.8228 428.0975 438.1143 C
f
*U
398.7476 520.3483 m
413.4234 527.434 L
413.4444 527.379 L
401.2058 515.0857 L
403.795 509.5463 L
424.9738 519.7867 L
423.1879 523.6121 L
407.6943 516.1252 L
407.6753 516.1734 L
420.6668 529.0123 L
418.1465 534.4157 L
396.9595 524.1722 L
398.7476 520.3483 L
f
*u
1 D
412.8279 416.1263 m
407.2941 418.985 402.0231 421.7142 398.6909 415.0528 c
395.3602 408.3831 400.6253 405.6471 406.158 402.7952 c
411.6291 399.9631 416.9625 397.2124 420.2926 403.8803 c
423.6228 410.5517 418.2973 413.2993 412.8279 416.1263 c
f
0 D
417.168 405.4938 m
416.0256 403.2159 413.5603 404.1241 408.2091 406.8938 c
402.8547 409.6636 400.6791 411.1546 401.8147 413.4317 c
402.9511 415.7104 405.4173 414.8045 410.7776 412.0336 c
416.1308 409.2616 418.3053 407.7655 417.168 405.4938 c
f
*U
431.2616 463.1717 m
430.6955 455.6557 L
423.8592 456.1829 L
424.3652 462.8942 L
420.7706 463.1777 L
420.2637 456.4687 L
414.5026 456.9174 L
415.0426 464.1976 L
411.4551 464.4802 L
410.5684 452.6785 L
433.9494 450.8566 L
434.8573 462.8942 L
431.2616 463.1717 L
f
426.9498 493.3454 m
409.1564 490.5904 L
409.8277 486.1091 L
427.947 488.9072 L
428.9369 489.0603 430.0444 488.4993 430.1966 487.493 c
430.5424 485.1451 427.7234 485.1051 425.8616 484.8216 C
426.547 480.244 L
431.8101 481.0606 434.594 481.767 433.6588 488.0333 c
433.1891 491.207 430.9982 493.9699 426.9498 493.3454 C
f
*u
1 D
407.5024 497.2725 m
431.6652 498.2689 L
430.4177 502.5637 L
425.0914 502.2451 L
423.3739 508.1817 L
428.0204 510.8253 L
426.6916 515.412 L
405.8308 503.0067 L
407.5024 497.2725 L
f
0 D
420.1821 506.2195 m
421.3877 502.0719 L
411.0877 501.1458 L
411.0667 501.1929 L
420.1821 506.2195 L
f
*U
*u
1 D
351.7146 365.4377 m
345.1637 361.8431 L
356.2792 340.8369 L
362.6708 344.3423 L
369.3838 348.0129 365.0275 355.159 363.3228 358.3868 c
359.8608 364.9456 356.8623 368.2573 351.7146 365.4377 C
f
0 D
360.394 347.2563 m
358.4959 346.2123 L
350.7945 360.7688 L
352.8247 361.8771 L
355.5536 363.3732 357.3524 359.9722 359.4027 356.095 c
362.1855 350.8319 362.7879 348.5659 360.394 347.2563 C
f
*U
387.4791 538.1963 m
405.7146 553.1958 L
402.9097 556.7153 L
384.6742 541.7147 L
387.4791 538.1963 L
f
*u
1 D
307.8692 351.9746 m
300.4586 351.3226 L
302.4737 327.5544 L
309.7191 328.1899 L
317.3083 328.8643 316.0916 337.1797 315.7849 340.8316 c
315.1548 348.234 313.6997 352.4868 307.8692 351.9746 C
f
0 D
308.7561 331.7851 m
306.6086 331.598 L
305.2089 348.0534 L
307.5097 348.2631 L
310.5901 348.5305 310.9238 344.6813 311.2906 340.3032 c
311.8037 334.3499 311.4629 332.0277 308.7561 331.7851 C
f
*U
*u
1 D
324.0697 355.0703 m
316.9227 353.3321 318.2916 347.4797 319.7407 341.3356 c
321.1736 335.2708 322.5586 329.3544 329.7138 331.0988 c
336.8667 332.8455 335.4758 338.7521 334.0429 344.8259 c
332.6017 350.964 331.2159 356.8161 324.0697 355.0703 c
f
0 D
328.8949 334.5693 m
326.4588 333.9743 325.5369 336.4673 324.1389 342.4147 c
322.7389 348.3575 322.4424 351.004 324.8864 351.5984 c
327.3236 352.1965 328.2517 349.6963 329.6424 343.7527 c
331.0506 337.818 331.3412 335.1657 328.8949 334.5693 c
f
*U
*u
1 D
336.4515 416.658 m
333.5913 416.658 L
333.5913 416.5347 333.5995 416.3533 333.6134 416.1107 c
333.6265 415.8782 333.6313 415.7031 333.6313 415.5987 c
333.6313 414.5403 333.536 413.7358 333.3549 413.2168 c
333.1763 412.6907 332.8906 412.433 332.5161 412.433 c
332.1162 412.433 331.8398 412.6425 331.6671 413.0722 c
331.5008 413.4943 331.4177 414.2628 331.4177 415.3632 c
331.4177 419.021 331.0781 421.3619 330.3986 422.3871 c
329.7192 423.398 328.4254 424.0426 326.5053 424.2971 C
328.4104 424.7189 329.8774 425.5305 330.9188 426.7142 c
331.9569 427.8866 332.4759 429.3405 332.4759 431.0651 c
332.4759 433.6336 331.6311 435.5529 329.9485 436.8203 c
328.2591 438.0871 325.7096 438.7243 322.2805 438.7243 C
302.8955 438.7243 L
302.8955 434.3683 L
304.3097 434.3683 L
305.3075 434.3683 305.9439 434.2292 306.2205 433.9525 c
306.4992 433.6758 306.6304 432.9473 306.6304 431.7576 C
306.6304 414.9964 L
306.6304 413.7931 306.4912 413.0512 306.2134 412.7686 c
305.9291 412.4832 305.2936 412.3378 304.3097 412.3378 C
302.8955 412.3378 L
302.8955 407.9667 L
319.8302 407.9667 L
319.8302 412.3378 L
318.2369 412.3378 L
317.2669 412.3378 316.6458 412.4832 316.3601 412.7686 c
316.0834 413.0512 315.9439 413.7931 315.9439 414.9964 C
315.9439 421.867 L
318.4583 421.867 L
320.0369 421.867 321.078 421.5903 321.569 421.0294 c
322.0741 420.4749 322.3236 419.1744 322.3236 417.13 C
322.3236 414.5454 L
322.3236 411.999 322.9047 410.1443 324.0754 408.9708 c
325.2396 407.8083 327.1025 407.219 329.65 407.219 c
332.0529 407.219 333.7937 407.8684 334.8729 409.1661 c
335.9531 410.4618 336.4923 412.5523 336.4923 415.4253 c
336.4923 415.5517 336.4863 415.7589 336.4733 416.0356 c
336.4583 416.3193 336.4515 416.5217 336.4515 416.658 C
f
0 D
321.9627 426.9506 m
321.2643 426.3483 320.0448 426.0438 318.3202 426.0438 C
315.862 426.0438 L
315.862 434.1668 L
318.6255 434.1668 L
320.258 434.1668 321.3955 433.8561 322.039 433.2328 c
322.6915 432.6015 323.015 431.5224 323.015 429.9769 c
323.015 428.557 322.662 427.553 321.9627 426.9506 c
f
*U
409.5646 541.3966 m
403.8517 537.5384 L
400.1947 543.1484 L
397.1894 541.1191 L
400.8441 535.5094 L
396.0323 532.2614 L
392.0638 538.3423 L
389.0574 536.3189 L
395.494 526.4512 L
415.0372 539.6431 L
408.4713 549.7064 L
405.466 547.6791 L
409.5646 541.3966 L
f
357.7275 407.7601 m
359.1944 408.2451 360.4209 408.9784 361.4049 409.9674 c
362.2629 410.8195 362.874 411.8445 363.2471 413.058 c
363.6139 414.2636 363.799 416.0013 363.799 418.2721 C
363.799 431.7704 L
363.799 431.9991 L
363.799 433.1214 363.9444 433.806 364.229 434.0483 c
364.5136 434.2839 365.1239 434.4021 366.044 434.4021 C
367.3525 434.4021 L
367.3525 438.7243 L
350.5524 438.7243 L
350.5524 434.4021 L
352.1245 434.4021 L
353.1226 434.4021 353.7519 434.2649 354.0214 433.9874 c
354.2978 433.7107 354.4302 432.976 354.4302 431.7704 C
354.4302 418.716 L
354.4302 415.9522 354.1337 414.1114 353.5316 413.1904 c
352.9281 412.2828 351.8617 411.8255 350.3169 411.8255 c
349.556 411.8255 348.8975 412.0041 348.3354 412.3786 c
347.7745 412.7465 347.3246 413.3137 346.9856 414.0553 C
347.2072 414.0071 347.4074 413.979 347.593 413.9569 c
347.7883 413.9379 347.9686 413.9252 348.1492 413.9252 c
349.2156 413.9252 350.0731 414.2968 350.7256 415.0443 c
351.3841 415.7929 351.7087 416.7839 351.7087 418.0037 c
351.7087 419.2963 351.3467 420.3295 350.6213 421.0911 c
349.8999 421.8608 348.9177 422.2426 347.671 422.2426 c
346.0107 422.2426 344.651 421.6453 343.6174 420.4397 c
342.5803 419.2421 342.0612 417.67 342.0612 415.7376 c
342.0612 413.1814 343.0315 411.0962 344.9684 409.4697 c
346.9175 407.8423 349.4367 407.0387 352.5534 407.0387 c
354.5337 407.0387 356.2603 407.274 357.7275 407.7601 c
f
U
U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
